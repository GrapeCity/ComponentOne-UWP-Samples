<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AppName_Text" xml:space="preserve">
    <value>CalendarSamples</value>
  </data>
  <data name="AppointmentSubject" xml:space="preserve">
    <value>New event - </value>
  </data>
  <data name="BoldedDay1" xml:space="preserve">
    <value>Dentist appointment</value>
  </data>
  <data name="BoldedDay2" xml:space="preserve">
    <value>Attend devel tools webinar</value>
  </data>
  <data name="BoldedDay3" xml:space="preserve">
    <value>Release dead line</value>
  </data>
  <data name="BoldedDay4" xml:space="preserve">
    <value>Marketing planning session</value>
  </data>
  <data name="BoldedDay5" xml:space="preserve">
    <value>Client satisfaction review</value>
  </data>
  <data name="BoldedDay6" xml:space="preserve">
    <value>Dentist appointment</value>
  </data>
  <data name="BoldedMotherBirthday" xml:space="preserve">
    <value>Mother's birthday</value>
  </data>
  <data name="CalendarSamplesBoldedDaysDescription" xml:space="preserve">
    <value>The C1Calendar control allows to set custom DataTemplate to represent bolded days. Use C1Calendar.BoldedDaySlotTemplate property to alter appearance of all bolded days.</value>
  </data>
  <data name="CalendarSamplesBoldedDaysName" xml:space="preserve">
    <value>Bolded Days</value>
  </data>
  <data name="CalendarSamplesBoldedDaysTitle" xml:space="preserve">
    <value>Custom Bolded Day Template</value>
  </data>
  <data name="CalendarSamplesCustomDataDescription" xml:space="preserve">
    <value>Bind calendar to custom data and use custom BoldedDaySlotTemplate to show the list of events. Use double tap to create new event; use Delete key to remove event; create several events for the same day.</value>
  </data>
  <data name="CalendarSamplesCustomDataName" xml:space="preserve">
    <value>Custom Data</value>
  </data>
  <data name="CalendarSamplesCustomDataTitle" xml:space="preserve">
    <value>Custom Data</value>
  </data>
  <data name="CalendarSamplesCustomDaysDescription" xml:space="preserve">
    <value>Use DataTemplate selectors to customize calendar days. Supply custom appearance for weekends, today date, holidays or any other days.</value>
  </data>
  <data name="CalendarSamplesCustomDaysName" xml:space="preserve">
    <value>Custom Days</value>
  </data>
  <data name="CalendarSamplesCustomDaysTitle" xml:space="preserve">
    <value>Custom Days</value>
  </data>
  <data name="CalendarSamplesDefaultDescription" xml:space="preserve">
    <value>Shows the C1Calendar control with default appearance options and some bolded dates.</value>
  </data>
  <data name="CalendarSamplesDefaultName" xml:space="preserve">
    <value>Default</value>
  </data>
  <data name="CalendarSamplesDefaultTitle" xml:space="preserve">
    <value>Default Appearance</value>
  </data>
  <data name="ChristmasDay" xml:space="preserve">
    <value>Christmas</value>
  </data>
  <data name="EarthDay" xml:space="preserve">
    <value>Earth Day</value>
  </data>
  <data name="FlagDay" xml:space="preserve">
    <value>Flag Day</value>
  </data>
  <data name="HalloweenDay" xml:space="preserve">
    <value>Halloween</value>
  </data>
  <data name="IndependenceDay" xml:space="preserve">
    <value>Independence Day</value>
  </data>
  <data name="InitializationException" xml:space="preserve">
    <value>Failed to create initial page.</value>
  </data>
  <data name="NewYearDay" xml:space="preserve">
    <value>New Year</value>
  </data>
  <data name="SessionStateErrorMessage" xml:space="preserve">
    <value>Frames must be either be registered before accessing frame session state, or not registered at all.</value>
  </data>
  <data name="SessionStateKeyErrorMessage" xml:space="preserve">
    <value>Frames can only be registered to one session state key.</value>
  </data>
  <data name="SuspensionManagerErrorMessage" xml:space="preserve">
    <value>SuspensionManager failed.</value>
  </data>
  <data name="UniqueIdItemsArgumentException" xml:space="preserve">
    <value>Only 'AllItems' is supported as a collection of items.</value>
  </data>
  <data name="ValentineDay" xml:space="preserve">
    <value>Valentine's Day</value>
  </data>
  <data name="VeteransDay" xml:space="preserve">
    <value>Veterans Day</value>
  </data>
</root>