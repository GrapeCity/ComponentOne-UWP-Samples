// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 12.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace TestScripts
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITest.Input;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.DirectUIControls;
    using Microsoft.VisualStudio.TestTools.UITesting.WindowsRuntimeControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = Microsoft.VisualStudio.TestTools.UITest.Input.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public partial class UIMap
    {
        
        /// <summary>
        /// AssertMethod1 - Use 'AssertMethod1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod1()
        {
            #region Variable Declarations
            XamlButton uISetValueButton = this.UISampleApplicationWindow.UISetValueButton;
            #endregion

            // Verify that the 'AutomationId' property of 'Set Value' button equals 'btn_Set'
            Assert.AreEqual(this.AssertMethod1ExpectedValues.UISetValueButtonAutomationId, uISetValueButton.AutomationId);
        }
        
        /// <summary>
        /// AssertMethod2 - Use 'AssertMethod2ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod2()
        {
            #region Variable Declarations
            XamlEdit uITxtEdit = this.UISampleApplicationWindow.UITxtEdit;
            #endregion

            // Verify that the 'AutomationId' property of 'txt' text box equals 'txt'
            Assert.AreEqual(this.AssertMethod2ExpectedValues.UITxtEditAutomationId, uITxtEdit.AutomationId);
        }
        
        #region Properties
        public virtual AssertMethod1ExpectedValues AssertMethod1ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod1ExpectedValues == null))
                {
                    this.mAssertMethod1ExpectedValues = new AssertMethod1ExpectedValues();
                }
                return this.mAssertMethod1ExpectedValues;
            }
        }
        
        public virtual AssertMethod2ExpectedValues AssertMethod2ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod2ExpectedValues == null))
                {
                    this.mAssertMethod2ExpectedValues = new AssertMethod2ExpectedValues();
                }
                return this.mAssertMethod2ExpectedValues;
            }
        }
        
        public UIStartmenuPane UIStartmenuPane
        {
            get
            {
                if ((this.mUIStartmenuPane == null))
                {
                    this.mUIStartmenuPane = new UIStartmenuPane();
                }
                return this.mUIStartmenuPane;
            }
        }
        
        public UICalculatorWindow UICalculatorWindow
        {
            get
            {
                if ((this.mUICalculatorWindow == null))
                {
                    this.mUICalculatorWindow = new UICalculatorWindow();
                }
                return this.mUICalculatorWindow;
            }
        }
        
        public UISampleApplicationWindow UISampleApplicationWindow
        {
            get
            {
                if ((this.mUISampleApplicationWindow == null))
                {
                    this.mUISampleApplicationWindow = new UISampleApplicationWindow();
                }
                return this.mUISampleApplicationWindow;
            }
        }
        #endregion
        
        #region Fields
        private AssertMethod1ExpectedValues mAssertMethod1ExpectedValues;
        
        private AssertMethod2ExpectedValues mAssertMethod2ExpectedValues;
        
        private UIStartmenuPane mUIStartmenuPane;
        
        private UICalculatorWindow mUICalculatorWindow;
        
        private UISampleApplicationWindow mUISampleApplicationWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class AssertMethod1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'AutomationId' property of 'Set Value' button equals 'btn_Set'
        /// </summary>
        public string UISetValueButtonAutomationId = "btn_Set";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class AssertMethod2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'AutomationId' property of 'txt' text box equals 'txt'
        /// </summary>
        public string UITxtEditAutomationId = "txt";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIStartmenuPane : UITestControl
    {
        
        public UIStartmenuPane()
        {
            #region Search Criteria
            this.TechnologyName = "UIA";
            this.SearchProperties[UITestControl.PropertyNames.ControlType] = "Pane";
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Start menu";
            this.SearchProperties["FrameworkId"] = "Win32";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "ImmersiveLauncher";
            this.WindowTitles.Add("Start menu");
            #endregion
        }
        
        #region Properties
        public UIStartAppsList UIStartAppsList
        {
            get
            {
                if ((this.mUIStartAppsList == null))
                {
                    this.mUIStartAppsList = new UIStartAppsList(this);
                }
                return this.mUIStartAppsList;
            }
        }
        #endregion
        
        #region Fields
        private UIStartAppsList mUIStartAppsList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIStartAppsList : DirectUIControl
    {
        
        public UIStartAppsList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DirectUIControl.PropertyNames.AutomationId] = "GridRoot";
            this.WindowTitles.Add("Start menu");
            #endregion
        }
        
        #region Properties
        public UIBingGroup UIBingGroup
        {
            get
            {
                if ((this.mUIBingGroup == null))
                {
                    this.mUIBingGroup = new UIBingGroup(this);
                }
                return this.mUIBingGroup;
            }
        }
        #endregion
        
        #region Fields
        private UIBingGroup mUIBingGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIBingGroup : DirectUIControl
    {
        
        public UIBingGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[DirectUIControl.PropertyNames.AutomationId] = "Group 2306968909120536576";
            this.WindowTitles.Add("Start menu");
            #endregion
        }
        
        #region Properties
        public DirectUIControl UICalculatorListItem
        {
            get
            {
                if ((this.mUICalculatorListItem == null))
                {
                    this.mUICalculatorListItem = new DirectUIControl(this);
                    #region Search Criteria
                    this.mUICalculatorListItem.SearchProperties[DirectUIControl.PropertyNames.AutomationId] = "Microsoft.WindowsCalculator_8wekyb3d8bbwe!App";
                    this.mUICalculatorListItem.WindowTitles.Add("Start menu");
                    #endregion
                }
                return this.mUICalculatorListItem;
            }
        }
        #endregion
        
        #region Fields
        private DirectUIControl mUICalculatorListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UICalculatorWindow : XamlWindow
    {
        
        public UICalculatorWindow()
        {
            #region Search Criteria
            this.SearchProperties[XamlControl.PropertyNames.Name] = "Calculator";
            this.SearchProperties[XamlControl.PropertyNames.ClassName] = "Windows.UI.Core.CoreWindow";
            this.WindowTitles.Add("Calculator");
            #endregion
        }
        
        #region Properties
        public XamlButton UISevenButton
        {
            get
            {
                if ((this.mUISevenButton == null))
                {
                    this.mUISevenButton = new XamlButton(this);
                    #region Search Criteria
                    this.mUISevenButton.SearchProperties[XamlButton.PropertyNames.AutomationId] = "num7Button";
                    this.mUISevenButton.WindowTitles.Add("Calculator");
                    #endregion
                }
                return this.mUISevenButton;
            }
        }
        
        public XamlButton UIEightButton
        {
            get
            {
                if ((this.mUIEightButton == null))
                {
                    this.mUIEightButton = new XamlButton(this);
                    #region Search Criteria
                    this.mUIEightButton.SearchProperties[XamlButton.PropertyNames.AutomationId] = "num8Button";
                    this.mUIEightButton.WindowTitles.Add("Calculator");
                    #endregion
                }
                return this.mUIEightButton;
            }
        }
        
        public XamlButton UIMultiplybyButton
        {
            get
            {
                if ((this.mUIMultiplybyButton == null))
                {
                    this.mUIMultiplybyButton = new XamlButton(this);
                    #region Search Criteria
                    this.mUIMultiplybyButton.SearchProperties[XamlButton.PropertyNames.AutomationId] = "multiplyButton";
                    this.mUIMultiplybyButton.WindowTitles.Add("Calculator");
                    #endregion
                }
                return this.mUIMultiplybyButton;
            }
        }
        
        public XamlText UICalculatorResultsText
        {
            get
            {
                if ((this.mUICalculatorResultsText == null))
                {
                    this.mUICalculatorResultsText = new XamlText(this);
                    #region Search Criteria
                    this.mUICalculatorResultsText.SearchProperties[XamlText.PropertyNames.AutomationId] = "CalculatorResults";
                    this.mUICalculatorResultsText.WindowTitles.Add("Calculator");
                    #endregion
                }
                return this.mUICalculatorResultsText;
            }
        }
        
        public UIItem0Pane UIItem0Pane
        {
            get
            {
                if ((this.mUIItem0Pane == null))
                {
                    this.mUIItem0Pane = new UIItem0Pane(this);
                }
                return this.mUIItem0Pane;
            }
        }
        
        public XamlButton UIEqualsButton
        {
            get
            {
                if ((this.mUIEqualsButton == null))
                {
                    this.mUIEqualsButton = new XamlButton(this);
                    #region Search Criteria
                    this.mUIEqualsButton.SearchProperties[XamlButton.PropertyNames.AutomationId] = "equalButton";
                    this.mUIEqualsButton.WindowTitles.Add("Calculator");
                    #endregion
                }
                return this.mUIEqualsButton;
            }
        }
        #endregion
        
        #region Fields
        private XamlButton mUISevenButton;
        
        private XamlButton mUIEightButton;
        
        private XamlButton mUIMultiplybyButton;
        
        private XamlText mUICalculatorResultsText;
        
        private UIItem0Pane mUIItem0Pane;
        
        private XamlButton mUIEqualsButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIItem0Pane : XamlControl
    {
        
        public UIItem0Pane(XamlControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.ControlType] = "Pane";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "ScrollViewer";
            this.SearchProperties["AutomationId"] = "textContainer";
            this.WindowTitles.Add("Calculator");
            #endregion
        }
        
        #region Properties
        public XamlText UIItem0Text
        {
            get
            {
                if ((this.mUIItem0Text == null))
                {
                    this.mUIItem0Text = new XamlText(this);
                    #region Search Criteria
                    this.mUIItem0Text.SearchProperties[XamlText.PropertyNames.AutomationId] = "CalculatorResults";
                    this.mUIItem0Text.WindowTitles.Add("Calculator");
                    #endregion
                }
                return this.mUIItem0Text;
            }
        }
        #endregion
        
        #region Fields
        private XamlText mUIItem0Text;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UISampleApplicationWindow : XamlWindow
    {
        
        public UISampleApplicationWindow()
        {
            #region Search Criteria
            this.SearchProperties[XamlControl.PropertyNames.Name] = "SampleApplication";
            this.SearchProperties[XamlControl.PropertyNames.ClassName] = "Windows.UI.Core.CoreWindow";
            this.WindowTitles.Add("SampleApplication");
            #endregion
        }
        
        #region Properties
        public XamlButton UISetValueButton
        {
            get
            {
                if ((this.mUISetValueButton == null))
                {
                    this.mUISetValueButton = new XamlButton(this);
                    #region Search Criteria
                    this.mUISetValueButton.SearchProperties[XamlButton.PropertyNames.AutomationId] = "btn_Set";
                    this.mUISetValueButton.WindowTitles.Add("SampleApplication");
                    #endregion
                }
                return this.mUISetValueButton;
            }
        }
        
        public XamlEdit UITxtEdit
        {
            get
            {
                if ((this.mUITxtEdit == null))
                {
                    this.mUITxtEdit = new XamlEdit(this);
                    #region Search Criteria
                    this.mUITxtEdit.SearchProperties[XamlEdit.PropertyNames.AutomationId] = "txt";
                    this.mUITxtEdit.WindowTitles.Add("SampleApplication");
                    #endregion
                }
                return this.mUITxtEdit;
            }
        }
        #endregion
        
        #region Fields
        private XamlButton mUISetValueButton;
        
        private XamlEdit mUITxtEdit;
        #endregion
    }
}
