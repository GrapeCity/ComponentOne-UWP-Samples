<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="txtAppName" xml:space="preserve">
    <value>FlexChart101</value>
  </data>
  <data name="txtCharttype" xml:space="preserve">
    <value>Chart type:</value>
  </data>
  <data name="InitializationException" xml:space="preserve">
    <value>Failed to create initial page.</value>
  </data>
  <data name="SessionStateErrorMessage" xml:space="preserve">
    <value>Frames must be either be registered before accessing frame session state, or not registered at all.</value>
  </data>
  <data name="SessionStateKeyErrorMessage" xml:space="preserve">
    <value>Frames can only be registered to one session state key.</value>
  </data>
  <data name="SuspensionManagerErrorMessage" xml:space="preserve">
    <value>SuspensionManager failed.</value>
  </data>
  <data name="Column" xml:space="preserve">
    <value>Column</value>
  </data>
  <data name="Line" xml:space="preserve">
    <value>Line</value>
  </data>
  <data name="LineSymbols" xml:space="preserve">
    <value>LineSymbols</value>
  </data>
  <data name="Scatter" xml:space="preserve">
    <value>Scatter</value>
  </data>
  <data name="Spline" xml:space="preserve">
    <value>Spline</value>
  </data>
  <data name="SplineArea" xml:space="preserve">
    <value>SplineArea</value>
  </data>
  <data name="SplineSymbols" xml:space="preserve">
    <value>SplineSymbols</value>
  </data>
  <data name="ChartTypesDescription" xml:space="preserve">
    <value>FlexChart control has three properties that allow you to customize the chart type:

1. chartType: Selects the default chart type to be used for all series objects. Individual series objects can override this.
2. stacking: Determines whether series objects are plotted independently, stacked, or stacked so their sum is 100%.
3. rotated: Flips the X and Y axes so X becomes vertical and Y horizontal.</value>
  </data>
  <data name="ChartTypesName" xml:space="preserve">
    <value>Chart Types</value>
  </data>
  <data name="ChartTypesTitle" xml:space="preserve">
    <value>Chart Types</value>
  </data>
  <data name="CustomizingAxesDescription" xml:space="preserve">
    <value>Use axis properties to customize the chart's axes, including ranges (minimum and maximum), label format, tickmark spacing, and gridlines.

The AxisX and AxisY class have boolean properties that allow you to turn features on or off (AxisLine, Labels, MajorTickMarks, and MajorGrid)</value>
  </data>
  <data name="CustomizingAxesName" xml:space="preserve">
    <value>Customizing Axes</value>
  </data>
  <data name="CustomizingAxesTitle" xml:space="preserve">
    <value>Customizing Axes</value>
  </data>
  <data name="DynamicDescription" xml:space="preserve">
    <value>You can use INotifyCollectionChanged data collections, so any changes you make to the data source are automatically reflected in the chart.

In this sample, we use a timer to add items to the data source, discarding old items to keep the total count at 20. The result is a dynamic chart that scrolls as new data arrives.</value>
  </data>
  <data name="DynamicName" xml:space="preserve">
    <value>Dynamic</value>
  </data>
  <data name="DynamicTitle" xml:space="preserve">
    <value>Dynamic</value>
  </data>
  <data name="GettingStartedDescription" xml:space="preserve">
    <value>Steps for getting started with FlexChart in UWP applications:
      
1. Drop FlexChart from the Toolbox to a page and add needed series.
2. Bind the data to FlexChart.</value>
  </data>
  <data name="GettingStartedName" xml:space="preserve">
    <value>Getting Started</value>
  </data>
  <data name="GettingStartedTitle" xml:space="preserve">
    <value>Getting Started</value>
  </data>
  <data name="LegendAndTitlesDescription" xml:space="preserve">
    <value>Customize the location of the chart legend with the Legend properties. Add titles to your charts with the Header, Footer, and axis Title properties.</value>
  </data>
  <data name="LegendAndTitlesName" xml:space="preserve">
    <value>Legend And Titles</value>
  </data>
  <data name="LegendAndTitlesTitle" xml:space="preserve">
    <value>Legend and Titles</value>
  </data>
  <data name="MixedTypesDescription" xml:space="preserve">
    <value>You can use different chart types for each chart series by setting the chartType property on the series itself. This overrides the chart's default chart type.

In the example below, the chart's chartType property is set to Column, but the Sales series overrides that to use the LineSymbols chart type.</value>
  </data>
  <data name="MixedTypesName" xml:space="preserve">
    <value>Mixed Chart Types</value>
  </data>
  <data name="MixedTypesTitle" xml:space="preserve">
    <value>Mixed Chart Types</value>
  </data>
  <data name="SelectionModesDescription" xml:space="preserve">
    <value>FlexChart allows you to select series or data points by clicking or touching them. Use the SelectionMode property to specify whether you want to allow selection by series, by data point, or no selection at all (selection is off by default).</value>
  </data>
  <data name="SelectionModesName" xml:space="preserve">
    <value>Selection Modes</value>
  </data>
  <data name="SelectionModesTitle" xml:space="preserve">
    <value>Selection Modes</value>
  </data>
  <data name="StylingSeriesDescription" xml:space="preserve">
    <value>FlexChart automatically picks colors for each series based on a default palette, which you can override by setting the Palette property. But you can also override the default settings by setting the Style property of any series to an object that specifies styling attributes, including Fill, Stroke, StrokeThickness, and so on.</value>
  </data>
  <data name="StylingSeriesName" xml:space="preserve">
    <value>Styling Series</value>
  </data>
  <data name="StylingSeriesTitle" xml:space="preserve">
    <value>Styling Series</value>
  </data>
  <data name="ToggleDescription" xml:space="preserve">
    <value>The Series class has a Visibility property that allows you to determine whether a series should be shown in the chart and in the legend, only in the legend, or completely hidden.

This sample shows how you can use the Visibility property to toggle the visibility of a series using two methods:

1. Clicking on legend entries: The chart directive sets the chart's LegendToggle property to true, which toggles the Visibility property of a series when its legend entry is clicked.
2. Using checkboxes: The form binds input controls directly to the Visibility property of each series.</value>
  </data>
  <data name="ToggleName" xml:space="preserve">
    <value>Toggle</value>
  </data>
  <data name="ToggleTitle" xml:space="preserve">
    <value>Toggle</value>
  </data>
  <data name="ToolTipsDescription" xml:space="preserve">
    <value>FlexChart has built-in support for tooltips. By default, the control displays tooltips when the user touches or hovers the mouse on a data point.

The tooltip content is generated using a template that may contain the following parameters:

1. seriesName: Name of the series that contains the chart element
2. pointIndex: Index of the chart element within the series
3. x: X-value of the chart element
4. y: Y-value of the chart element</value>
  </data>
  <data name="ToolTipsName" xml:space="preserve">
    <value>Tooltips</value>
  </data>
  <data name="ToolTipsTitle" xml:space="preserve">
    <value>Tooltips</value>
  </data>
  <data name="Bar" xml:space="preserve">
    <value>Bar</value>
  </data>
  <data name="Area" xml:space="preserve">
    <value>Area</value>
  </data>
  <data name="txtAxisX" xml:space="preserve">
    <value>AxisX title:</value>
  </data>
  <data name="txtAxisY" xml:space="preserve">
    <value>AxisY title:</value>
  </data>
  <data name="txtFooter" xml:space="preserve">
    <value>Footer:</value>
  </data>
  <data name="txtHeader" xml:space="preserve">
    <value>Header:</value>
  </data>
  <data name="txtLegend" xml:space="preserve">
    <value>Legend:</value>
  </data>
  <data name="Footer" xml:space="preserve">
    <value></value>
  </data>
  <data name="Header" xml:space="preserve">
    <value>Sample Chart</value>
  </data>
  <data name="AxisX.Title" xml:space="preserve">
    <value>Month</value>
  </data>
  <data name="AxisY.Title" xml:space="preserve">
    <value>Amount</value>
  </data>
  <data name="txtStacking" xml:space="preserve">
    <value>Stacking:</value>
  </data>
  <data name="txtPalette" xml:space="preserve">
    <value>Palette:</value>
  </data>
  <data name="txtSelectionMode" xml:space="preserve">
    <value>Selection mode:</value>
  </data>
  <data name="cbApril" xml:space="preserve">
    <value>April</value>
  </data>
  <data name="cbMarch" xml:space="preserve">
    <value>March</value>
  </data>
  <data name="cbMay" xml:space="preserve">
    <value>May</value>
  </data>
  <data name="btnFast" xml:space="preserve">
    <value>Fast</value>
  </data>
  <data name="btnMedium" xml:space="preserve">
    <value>Medium</value>
  </data>
  <data name="btnSlow" xml:space="preserve">
    <value>Slow</value>
  </data>
  <data name="btnStart" xml:space="preserve">
    <value>Start</value>
  </data>
  <data name="btnStop" xml:space="preserve">
    <value>Stop</value>
  </data>
  <data name="cbRotate" xml:space="preserve">
    <value>Rotate</value>
  </data>
  <data name="btnOk" xml:space="preserve">
    <value>OK</value>
  </data>
  <data name="FunnelChartDescription" xml:space="preserve">
    <value>The example below shows you how to create and customize Funnel Chart.</value>
  </data>
  <data name="FunnelChartName" xml:space="preserve">
    <value>Funnel Chart</value>
  </data>
  <data name="FunnelChartTitle" xml:space="preserve">
    <value>Funnel Chart</value>
  </data>
  <data name="FunnelType" xml:space="preserve">
    <value>Funnel Type: </value>
  </data>
  <data name="NeckHeight" xml:space="preserve">
    <value>Neck Height:</value>
  </data>
  <data name="NeckWidth" xml:space="preserve">
    <value>Neck Width:</value>
  </data>
  <data name="Step" xml:space="preserve">
    <value>Step</value>
  </data>
  <data name="StepArea" xml:space="preserve">
    <value>StepArea</value>
  </data>
  <data name="StepSymbols" xml:space="preserve">
    <value>StepSymbols</value>
  </data>
  <data name="AxisXLegend.Title" xml:space="preserve">
    <value>Country</value>
  </data>
  <data name="txtGroupLegend" xml:space="preserve">
    <value>GroupLegend</value>
  </data>
</root>